CREATE DATABASE ER_MODELING;

USE ER_MODELING;

# 영화 - 이름, 유형(장르), 인물 정보, 러닝타임, 출시 연도, 종료 연도, 성인영화 여부, 평점(평점 투표수) 
# 평점은 USER_COMMENT랑 연결해서 COUNT, AVG하면 될 듯
# 다수의 장르, 다수의 참여 인물 정보는 따로 테이블 만드는게 좋을 것 같음
# 러닝타임(XX분), 출시 연도 ,종료 연도 데이터 타입? 
CREATE TABLE MOVIE(
	MOVIE_ID BIGINT PRIMARY KEY AUTO_INCREMENT,
	NAME VARCHAR(100),
	RUNNING_TIME INT, # -분
	ADULT_MOVIE_YN CHAR(1), 
	RELEASE_YEAR YEAR,
	END_YEAR YEAR
);


# FK할 때, MOVIE 테이블의 MOVIE_ID의 데이터 타입 말고 AUTO_INCREMENT라는 것도 따로 써줘야하나? NO
CREATE TABLE MOVIE_TYPE(
    MOVIE_TYPE_ID BIGINT PRIMARY KEY AUTO_INCREMENT,
	MOVIE_ID BIGINT,
	TYPE VARCHAR(20),
	FOREIGN KEY (MOVIE_ID) REFERENCES MOVIE(MOVIE_ID)
);

# 이름도 성, 이름 나눠야하나? 
# 영화 내 직함, 배역은 직업이 배우일 경우에만 필요하지 않나? 따로 빼야하나? 아니면 DEAFULT NULL로 해서 배우일 경우에만 입력하도록?
CREATE TABLE PARTICIPANTS(
	PARTICIPANTS_ID BIGINT PRIMARY KEY AUTO_INCREMENT,
	MOVIE_ID BIGINT,
	FIRST_NAME VARCHAR(50),
    LAST_NAME VARCHAR(50),
	JOB VARCHAR(20),
	MAJOR_WORK VARCHAR(100),
	MOVIE_POSITION VARCHAR(20), # 영화 내 직함
	MOVIE_ROLE VARCHAR(20),     # 배역
	FOREIGN KEY(MOVIE_ID) REFERENCES MOVIE(MOVIE_ID)
);

# 아이디, 이메일은 중복 될 수가 없다고 하는데 PK가 2개일 수 있나? UNIQUE로
# 선호 장르는 영화 장르(MOVIE_TYPE) 테이블과 다른거고, 다른 테이블을 만들어야 하나? 
CREATE TABLE CUSTOMER(
	CUSTOMER_ID VARCHAR(100) PRIMARY KEY,
	EMAIL VARCHAR(320) UNIQUE,
	PASSWD VARCHAR(20),
	PHONE_NO VARCHAR(10),
	GENDER CHAR(1)
);

# 이렇게 하면 CUSTOMER가 선호 장르 (0,1,N개 가질 수 있는건가)
CREATE TABLE CUSTOMER_PREFER_TYPE(
    CUSTOMER_PREFER_TYPE_ID BIGINT PRIMARY KEY AUTO_INCREMENT,
	CUSTOMER_ID VARCHAR(20),
	PREFER_TYPE VARCHAR(20),
	FOREIGN KEY(CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID)
);

# 유니크 제약 조건 추가
CREATE TABLE USER_COMMENT(
	COMMENT_ID BIGINT PRIMARY KEY AUTO_INCREMENT,
	CUSTOMER_ID VARCHAR(20),
	MOVIE_ID BIGINT,
	RATING INT,
	COMMNET VARCHAR(200),
	ENROLL_AT TIMESTAMP,
	FOREIGN KEY(CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID),
	FOREIGN KEY(MOVIE_ID) REFERENCES MOVIE(MOVIE_ID),
	UNIQUE (CUSTOMER_ID, MOVIE_ID) 
);

# 유니크 제약 조건 추가
CREATE TABLE HISTORY(
    HISTORY_ID BIGINT PRIMARY KEY AUTO_INCREMENT,
	CUSTOMER_ID VARCHAR(20),
	MOVIE_ID BIGINT,
	VIEWING_DT TIMESTAMP,
	VIEWING_TIME TIME,
	PLAYTIME TIME,
	FOREIGN KEY(CUSTOMER_ID) REFERENCES CUSTOMER(CUSTOMER_ID),
	FOREIGN KEY(MOVIE_ID) REFERENCES MOVIE(MOVIE_ID),
	UNIQUE (CUSTOMER_ID, MOVIE_ID)
);
